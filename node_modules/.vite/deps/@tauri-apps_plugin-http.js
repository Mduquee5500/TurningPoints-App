import "./chunk-DC5AMYBS.js";

// node_modules/@tauri-apps/api/external/tslib/tslib.es6.js
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}

// node_modules/@tauri-apps/api/core.js
var _Channel_onmessage;
var _Channel_nextMessageId;
var _Channel_pendingMessages;
var _Resource_rid;
var SERIALIZE_TO_IPC_FN = "__TAURI_TO_IPC_KEY__";
function transformCallback(callback, once = false) {
  return window.__TAURI_INTERNALS__.transformCallback(callback, once);
}
var Channel = class {
  constructor() {
    this.__TAURI_CHANNEL_MARKER__ = true;
    _Channel_onmessage.set(
      this,
      () => {
      }
      // the id is used as a mechanism to preserve message order
    );
    _Channel_nextMessageId.set(this, 0);
    _Channel_pendingMessages.set(this, []);
    this.id = transformCallback(({ message, id }) => {
      if (id == __classPrivateFieldGet(this, _Channel_nextMessageId, "f")) {
        __classPrivateFieldGet(this, _Channel_onmessage, "f").call(this, message);
        __classPrivateFieldSet(this, _Channel_nextMessageId, __classPrivateFieldGet(this, _Channel_nextMessageId, "f") + 1, "f");
        while (__classPrivateFieldGet(this, _Channel_nextMessageId, "f") in __classPrivateFieldGet(this, _Channel_pendingMessages, "f")) {
          const message2 = __classPrivateFieldGet(this, _Channel_pendingMessages, "f")[__classPrivateFieldGet(this, _Channel_nextMessageId, "f")];
          __classPrivateFieldGet(this, _Channel_onmessage, "f").call(this, message2);
          delete __classPrivateFieldGet(this, _Channel_pendingMessages, "f")[__classPrivateFieldGet(this, _Channel_nextMessageId, "f")];
          __classPrivateFieldSet(this, _Channel_nextMessageId, __classPrivateFieldGet(this, _Channel_nextMessageId, "f") + 1, "f");
        }
      } else {
        __classPrivateFieldGet(this, _Channel_pendingMessages, "f")[id] = message;
      }
    });
  }
  set onmessage(handler) {
    __classPrivateFieldSet(this, _Channel_onmessage, handler, "f");
  }
  get onmessage() {
    return __classPrivateFieldGet(this, _Channel_onmessage, "f");
  }
  [(_Channel_onmessage = /* @__PURE__ */ new WeakMap(), _Channel_nextMessageId = /* @__PURE__ */ new WeakMap(), _Channel_pendingMessages = /* @__PURE__ */ new WeakMap(), SERIALIZE_TO_IPC_FN)]() {
    return `__CHANNEL__:${this.id}`;
  }
  toJSON() {
    return this[SERIALIZE_TO_IPC_FN]();
  }
};
async function invoke(cmd, args = {}, options) {
  return window.__TAURI_INTERNALS__.invoke(cmd, args, options);
}
_Resource_rid = /* @__PURE__ */ new WeakMap();

// node_modules/@tauri-apps/plugin-http/dist-js/index.js
var ERROR_REQUEST_CANCELLED = "Request cancelled";
async function fetch(input, init) {
  const signal = init == null ? void 0 : init.signal;
  if (signal == null ? void 0 : signal.aborted) {
    throw new Error(ERROR_REQUEST_CANCELLED);
  }
  const maxRedirections = init == null ? void 0 : init.maxRedirections;
  const connectTimeout = init == null ? void 0 : init.connectTimeout;
  const proxy = init == null ? void 0 : init.proxy;
  const danger = init == null ? void 0 : init.danger;
  if (init) {
    delete init.maxRedirections;
    delete init.connectTimeout;
    delete init.proxy;
    delete init.danger;
  }
  const headers = (init == null ? void 0 : init.headers) ? init.headers instanceof Headers ? init.headers : new Headers(init.headers) : new Headers();
  const req = new Request(input, init);
  const buffer = await req.arrayBuffer();
  const data = buffer.byteLength !== 0 ? Array.from(new Uint8Array(buffer)) : null;
  for (const [key, value] of req.headers) {
    if (!headers.get(key)) {
      headers.set(key, value);
    }
  }
  const headersArray = headers instanceof Headers ? Array.from(headers.entries()) : Array.isArray(headers) ? headers : Object.entries(headers);
  const mappedHeaders = headersArray.map(([name, val]) => [
    name,
    // we need to ensure we have all header values as strings
    // eslint-disable-next-line
    typeof val === "string" ? val : val.toString()
  ]);
  if (signal == null ? void 0 : signal.aborted) {
    throw new Error(ERROR_REQUEST_CANCELLED);
  }
  const rid = await invoke("plugin:http|fetch", {
    clientConfig: {
      method: req.method,
      url: req.url,
      headers: mappedHeaders,
      data,
      maxRedirections,
      connectTimeout,
      proxy,
      danger
    }
  });
  const abort = () => invoke("plugin:http|fetch_cancel", { rid });
  if (signal == null ? void 0 : signal.aborted) {
    abort();
    throw new Error(ERROR_REQUEST_CANCELLED);
  }
  signal == null ? void 0 : signal.addEventListener("abort", () => void abort());
  const { status, statusText, url, headers: responseHeaders, rid: responseRid } = await invoke("plugin:http|fetch_send", {
    rid
  });
  const readableStreamBody = new ReadableStream({
    start: (controller) => {
      const streamChannel = new Channel();
      streamChannel.onmessage = (res2) => {
        if (signal == null ? void 0 : signal.aborted) {
          controller.error(ERROR_REQUEST_CANCELLED);
          return;
        }
        const resUint8 = new Uint8Array(res2);
        const lastByte = resUint8[resUint8.byteLength - 1];
        const actualRes = resUint8.slice(0, resUint8.byteLength - 1);
        if (lastByte == 1) {
          controller.close();
          return;
        }
        controller.enqueue(actualRes);
      };
      invoke("plugin:http|fetch_read_body", {
        rid: responseRid,
        streamChannel
      }).catch((e) => {
        controller.error(e);
      });
    }
  });
  const res = new Response(readableStreamBody, {
    status,
    statusText
  });
  Object.defineProperty(res, "url", { value: url });
  Object.defineProperty(res, "headers", {
    value: new Headers(responseHeaders)
  });
  return res;
}
export {
  fetch
};
//# sourceMappingURL=@tauri-apps_plugin-http.js.map
